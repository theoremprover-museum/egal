(* Title "Preamble Signature for Classical Principles in Simple Type Theory" *)
(* Author "Chad E. Brown" *)

(* Unicode False "22A5" *)
Definition False : prop := forall P : prop , P.
(* Unicode True "22A4" *)
Definition True : prop := forall P : prop , P -> P.
Axiom TrueI : True.
Definition not : prop -> prop := fun A : prop => A -> False.
(* Unicode ~ "00ac" *)
Prefix ~ 700 := not.
Axiom dnegI : forall A:prop, A -> ~ ~ A.
Axiom contrapositive : forall A B : prop , (A -> B) -> ~ B -> ~ A.
Definition and : prop -> prop -> prop := fun A B : prop => forall P : prop , (A -> B -> P) -> P.
(* Unicode /\ "2227" *)
Infix /\ 780 left  := and.
Axiom andI : forall A B : prop , A -> B -> A /\ B.
Definition or : prop -> prop -> prop := fun A B : prop => forall P : prop , (A -> P) -> (B -> P) -> P.
(* Unicode \/ "2228" *)
Infix \/ 785 left  := or.
Axiom orIL : forall A B : prop , A -> A \/ B.
Axiom orIR : forall A B : prop , B -> A \/ B.
Axiom or_not_and_demorgan : forall A B:prop, ~ A \/ ~ B -> ~ (A /\ B).
Definition iff : prop -> prop -> prop := fun A B : prop => (A -> B) /\ (B -> A).
(* Unicode <-> "2194" *)
Infix <-> 805 := iff.
Axiom iffI : forall A B : prop , (A -> B) -> (B -> A) -> (A <-> B).
Section Poly1_eq.
Variable A : SType.
Definition eq : A -> A -> prop := fun x y => forall Q : A -> prop , Q x -> Q y.
Definition neq : A -> A -> prop := fun x y => ~ eq x y.
End Poly1_eq.
Infix = 502 := eq.
(* Unicode <> "2260" *)
Infix <> 502 := neq.
Section Poly1_eqthms.
Variable A : SType.
Axiom eqI : forall x : A , x = x.
Axiom eq_sym : forall x y : A , x = y -> y = x.
End Poly1_eqthms.
Section Poly1_exdef.
Variable A : SType.
Variable Q : A -> prop.
Definition ex : prop := forall P : prop , (forall x : A , Q x -> P) -> P.
End Poly1_exdef.
(* Unicode exists "2203" *)
Binder+ exists , := ex.
Section Poly1_exthms.
Variable A : SType.
Axiom exI : forall P : A -> prop , forall x : A , P x -> exists x : A , P x.
Axiom not_ex_all_demorgan : forall P : A -> prop , (~ exists x : A , P x) -> forall x : A , ~ P x.
Axiom ex_not_all_demorgan : forall P : A -> prop , (exists x : A , ~ P x) -> ~ forall x : A , P x.
End Poly1_exthms.
Section EqExercises.
Variable A : SType.
Axiom eq_leastrefl_1 : forall x y : A , (forall r : A -> A -> prop , (forall z : A , r z z) -> r x y) -> x = y.
Axiom eq_leastrefl_2 : forall x y : A , x = y -> (forall r : A -> A -> prop , (forall z : A , r z z) -> r x y).
End EqExercises.
Axiom prop_ext : forall A B : prop , (A <-> B) -> A = B.
Axiom prop_ext2 : forall A B : prop , (A -> B) -> (B -> A) -> A = B.
Section PE.
Variable A : SType.
Axiom pred_ext : forall P Q : A -> prop , P c= Q -> Q c= P -> P = Q.
End PE.
Section RE.
Variable A B : SType.
Axiom reln_ext : forall R S : A -> B -> prop , R c= S -> S c= R -> R = S.
End RE.
Section Choice.
Variable A : SType.
Parameter Eps : (A -> prop) -> A.
Axiom EpsR : forall P : A -> prop , forall x : A , P x -> P (Eps P).
End Choice.
Binder some , := Eps.
